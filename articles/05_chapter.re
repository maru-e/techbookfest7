= ロードバランサーを作成しよう

== ロードバランサーの作成

ロードバランサーとは、負荷分散装置ともいいます。その名のとおり、負荷を分散する装置なのですが、他にも後述するHTTPS通信をすることができたりします。
今回はできる限り無料枠の中でシステムを構築するため、EC2インスタンスは1台しか作成していません。このため、負荷分散装置としての役割はないですが
、HTTPSの終端装置としてロードバランサーを配置したいと思います。

まずはHTTPの通信をEC2インスタンスに中継できるようにしましょう。

//image[200_alb][ロードバランサーの作成][scale=0.9]{
//}

ロードバランサーは、EC2ダッシュボードから操作していきます。
左側のメニューで「ロードバランサー」を選択しましょう。

//image[201_EC2_Management_Console][「ロードバランサー」を選択][scale=0.9]{
//}

「ロードバランサーの作成」をクリックします。

//image[202_EC2_Management_Console][「ロードバランサーの作成」をクリック][scale=0.9]{
//}

ロードバランサーは、2019年9月現在2種類存在し、扱えるプロトコルが異なります。@<fn>{alb}今回はHTTPやHTTPSを扱いたいので、一番左の「Application Load Balancer」（ALB）の「作成」をクリックします。
//footnote[alb][Application Load BalancerはL7のロードバランサー、Network Load BalancerはL4のロードバランサーといわれます。HTTPやHTTPSなどアプリケーション層をL7、TCPなどのトランスポート層をL4と呼ぶためです。L7の方がアプリケーションごとに振り分けができたりして高機能ですが、色々できる分L4のロードバランサーよりも処理自は遅くなります。]

//image[203_EC2_Management_Console][「Application Load Balancer」を選択][scale=0.9]{
//}

ロードバランサーの名前には「start-infra-on-aws」と入力します。

//image[204_EC2_Management_Console][「start-infra-on-aws」と入力][scale=0.9]{
//}

VPCは「start-infra-on-aws」を選択します。
ロードバランサーは、２つ以上のアベイラビリティーゾーン（AZ）の使用を前提としていますので、
public-subnet01とpublic-subnet02の２つを選択します。

「次の手順」をクリックします。

//image[205_EC2_Management_Console][VPCとアベイラビリティーゾーンを選択][scale=0.9]{
//}

httpsを使用するように警告が出ますが、今はそのままで構いません。

「次の手順」をクリックします。

//image[206_EC2_Management_Console][「次の手順」をクリック][scale=0.9]{
//}

セキュリティグループの設定は、セキュリティグループ名と説明に「alb」と入力します。
許可する通信として、タイプ「http」、プロトコル「TCP」ポート「80」、ソースには、やはり自分のPCのみアクセスできるように「自分のPCが使用しているグローバルIP/32」を入力しましょう。

//image[207_EC2_Management_Console][セキュリティグループの設定][scale=0.9]{
//}

ルーティングの設定は、ロードバランサーから通信を振り分ける先のターゲットを設定します。
「新しいターゲットグループ」を選択し、名前に「ap」と入力します。

他はデフォルト設定のまま、「次の手順」をクリックします。

//image[208_EC2_Management_Console][ルーティングの設定][scale=0.9]{
//}

ロードバランサーから通信を振り分ける先のターゲットを登録します。
インスタンスの一覧からapのEC2インスタンスを選択し、「登録済みに追加」をクリックします。

//image[209_EC2_Management_Console][ターゲットの登録][scale=0.9]{
//}

登録済みターゲットに、apのEC2インスタンスが登録されました。

「次の手順」をクリックします。

//image[210_EC2_Management_Console][EC2インスタンスが登録された][scale=0.9]{
//}

設定内容を確認したら、「作成」をクリックします。

//image[211_EC2_Management_Console][「作成」をクリック][scale=0.9]{
//}

ロードバランサーが作成できました。

//image[212_EC2_Management_Console][ロードバランサーが作成できた][scale=0.9]{
//}

== EC2インスタンスのセキュリティグループの編集

ロードバランサーを作成しただけでは、ロードバランサーからEC2インスタンスに接続できません。
EC2インスタンス側で、ロードバランサーからのアクセスを許可する必要があります。

通信のアクセスを許可する設定はどこでしましたか？

セキュリティグループでしたね。
そのままEC2ダッシュボードの左のメニューから「セキュリティグループ」を選択し、apのセキュリティグループを選択します。

次に、インバウンドタブを表示し、「編集」をクリックしましょう。

//image[216_EC2_Management_Console][セキュリティグループの編集][scale=0.9]{
//}

「ルールの追加」をクリックし、
タイプ「HTTP」、プロトコル「TCP」、ポート「80」、ソースには「alb」のセキュリティグループを選択します。

「保存」をクリックします。

//image[217_EC2_Management_Console][ALBからHTTPの通信を許可する][scale=0.9]{
//}

インバウンドに、albのセキュリティグループが追加されました。

これで、ロードバランサーからEC2インスタンスへのアクセスが可能になりました。

//image[218_EC2_Management_Console][ALBからHTTPの通信が許可された][scale=0.9]{
//}

== ターゲットの状態確認

左のメニューで、ロードバランサーの「ターゲットグループ」を選択しましょう。

//image[213_EC2_Management_Console][「ターゲットグループ」を選択][scale=0.9]{
//}

ターゲットタブを表示し、登録済みターゲットを見てみると、ステータスが「unhealthy」になっていますね。

これは、ロードバランサーがEC2インスタンスにヘルスチェック@<fn>{health_check}をしてもapインスタンス上で何もレスポンスを返すアプリケーションが動いていないためです。

これからいよいよアプリケーションを起動していきます。
//footnote[health_check][ALBにはヘルスチェックの設定がされています。デフォルト設定のまま作成しましたが、ALBが30秒間隔でEC2インスタンスへHTTPアクセスし、200okが返ってくるようであれば正常（healthy）とみなされるように設定されています。ターゲットがunhealthyの場合、そのターゲットには通信を振り分けません。]

//image[214_EC2_Management_Console][ターゲットがunhealthy][scale=0.9]{
//}
