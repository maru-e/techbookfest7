
= ネットワークを作成しよう

== ネットワークを作成する前に

=== IPアドレスってどんなもの？

たとえば、2台のPCがあったとします。
このPC同士が通信するためには、LANケーブルで繋いだだけでは通信できません。PCにはIPアドレスを与える必要があります。
手紙を郵便でやり取りするためには住所が必要ですよね。IPアドレスはネットワーク上の住所みたいなものです。

IPアドレスは次のような「.」で区切った8ビット×4つ＝32ビットの数字です。@<fn>{bit}
//footnote[bit][普段私たちが使っている数字は10進数といい、コンピューターの世界ではすべてのデータを2進数（1か0）で表します。1ビットは、2進数で表した時の1桁のことです。]

//list[IP_bit][IPアドレス]{
11000000.10101000.00000001.00000000
//}

この1と0の羅列では、パッと見で解読するのが難しいですよね。
そこで、人間がわかりやすいように10進数に変換するとこんな4つの数字になります。

//list[IP_10][IPアドレス(10進数)]{
192.168.1.0
//}

だいぶ分かりやすくなりましたね。

=== ネットワーク部とホスト部

2台のPC同士が通信するためには、IPアドレスを持っているだけでなく、同じNWに属していないといけません。
では、どうやって同じNWか見分けるのでしょうか？

実は、IPアドレスはネットワーク部とホスト部に分かれています。この分け目がどこなのかを表すために、CIDR@<fn>{CIDR}表記という次のようなIPアドレスの書き方があります。
//footnote[CIDR][Classless Inter-Domain Routingの略で、サイダーと呼びます。CIDRは「アドレスクラスの概念を用いないでIPアドレスの割り当てなどを可能にする仕組み」です。IPアドレスには、もともとIPアドレスの範囲ごとにクラス分けする「アドレスクラス」という考え方があり、ネットワーク部とホスト部の分け目はクラスごとに固定されていました。アドレスクラスに縛られずに分け目を決められるようにしたのがCIDRです。]

//list[CIDR][CIDR表記]{
192.168.1.0/24
//}

「/24」がネットワーク部とホスト部の分け目です。
これは、左から24ビット目（10進数だと3つめの数字）までがネットワーク部であることを示しています。

ネットワーク部の数字が同じであれば、同じネットワークということになります。次に例を記載します。

 * 192.168.1.1/24と192.168.1.2/24は同じネットワークです。
 * 192.168.1.1/24と192.168.2.1/24は違うネットワークです。

また、ネットワークに接続できるコンピューターの数には制限があります。いくつかというと、ホスト部の範囲で表せる分です。/24の場合、ホスト部は最後の8ビット（10進数だと1つの数字）になりますね。
8ビットは、00000000〜11111111の数字が表せますが、10進数で表すと0〜255になります。（256個）
なお、0はネットワークアドレス、255はブロードキャストアドレスと決まっていてホストには使えないので、254個がホストアドレスとして使えます。

254台のコンピューターが接続できると考えてください。

=== ネットワークのサブネット化

１つのネットワークを、分割することができます。これをサブネット化と呼びます。
サブネット化することで、お互いに接続するための設定をしない限り、サブネット間でアクセスできなくなります。
意図しない通信が発生しないことで通信経路が分かりやすくなりますし、セキュリティ面での安全性が高くなります。

たとえば次のネットワークがあったとします。
ネットワーク部が左から16ビット分（10進数で数字2つ分）ですね。

//list[Subnet1][１つのネットワーク]{
10.0.0.0/16
//}

ネットワークを分割するためには、ホスト部を犠牲にしてネットワーク部を増やします。
ネットワーク部を左から24ビット分に（10進数で数字3つ分に）増やしましょう。@<fn>{subnet}
//footnote[subnet][増やすのは2ビット分でも3ビット分でも構いません。どれくらいネットワーク部を増やすかは、どれくらいサブネットを分割したいか、どれくらい各サブネットにコンピューターを接続したいかによって決まります。]


//list[Subnet2][ネットワーク部を増やす]{
10.0.0.0/24
//}

次のように、増やした分のネットワーク部でネットワークを分割することができます。これをサブネット化といいます。

//list[Subnet3][サブネット化してネットワークを分割する]{
10.0.0.0/24・・・サブネット1
10.0.1.0/24・・・サブネット2
10.0.2.0/24・・・サブネット3
・・・
//}

=== グローバルIPアドレスとプライベートIPアドレス

IPアドレスには、2種類あります。グローバル（パブリック）IPアドレスとプライベート（ローカル）IPアドレスです。

インターネットに接続するためのIPアドレスのことはグローバルIPアドレスと呼びます。

一方で、社内のネットワークや後述するVPCなどのプライベート空間内でのみ利用されるIPアドレスは、プライベートIPアドレスと呼びます。
インターネットに接続することはできません。

複数のプライベートIPアドレスがグローバルIPアドレスを共有することで、コンピュータごとにIPアドレスを振り分けるのではなく、ネットワークごとに振り分けられるようになり、より多くのコンピュータがインターネットに接続できるようになっています。

また、IPアドレスの管理組織により、次のIPアドレスは、プライベートIPアドレスとして使うことが定められています。
グローバルIPアドレスは、次のIPアドレス以外になります。

 * 10.0.0.0～10.255.255.255
 * 172.16.0.0～172.31.255.255
 * 192.168.0.0～192.168.255.255

== VPCを作成する
それでは、AWSで実際にネットワークを作成していきましょう。
VPCというサービスを使います。

VPC（Virtual Private Cloud）とは、その名のとおり、仮想的なプライベートクラウドです。

クラウドには、大きく次の2種類があります。

 * パブリッククラウド・・・不特定多数のユーザーがサーバーを共有する。
 * プライベートクラウド・・・特定の企業やユーザー専用のクラウド。その分費用が高くなるが、サーバーも独り占め。

AWSはパブリッククラウドなのですが、VPCを使うことで、まるでプライベートクラウドのように他のネットワークから隔離されたようなシステムをつくることができます。

これからAWSで作るものすべて（サブネットやEC2インスタンスなど）は、VPCの中に作成します。

//image[101_VPC][VPC][scale=0.6]{
//}

IAMユーザーでログインしたら、トップページから「VPC」を検索しましょう。

//image[102_IAM_Management_Console][VPCを検索する][scale=0.9]{
//}

VPCのダッシュボードが開きましたね。

左のメニューで「VPC」を選択し、「VPCの作成」をクリックします。

//image[103_VPC_Management_Console][VPCの作成をクリック][scale=0.9]{
//}

VPCの作成画面です。
VPC名に「start-infra-on-aws」と入力しましょう。

CIDRブロックとはVPCの中で使えるIPアドレスの範囲を決めるものです。VPCはプライベートネットワークですので、プライベートIPアドレスの範囲を使います。
今回は「10.0.0.0/16」と入力しましょう。

残りの項目は「IPv6 CIDR ブロックなし」を選択、「テナンシー」は「デフォルト」のままで、
「作成」をクリックします。

//image[104_VPC_Management_Console][VPCの作成][scale=1.0]{
//}

作成できましたね。

「閉じる」をクリックします。

//image[105_VPC_Management_Console][VPCの作成完了][scale=0.9]{
//}

作成されたVPCが確認できます。

//image[106_VPC_Management_Console][VPCが作成された][scale=0.9]{
//}


== IGWを作成する

VPCが作成できましたが、このままではVPCの中のサーバーからインターネットにアクセスできませんし、
逆にインターネットからVPCの中のサーバーにアクセスできません。

これを可能にするためにIGW（Internet Gateway）が必要です。

IGWは、VPC内とインターネットをつなぐ玄関のようなものです。具体的にはプライベートIPアドレスとグローバルIPアドレスの紐付けを把握して、出入りする時に変換してくれます。

//image[110_IGW][IGW][scale=0.6]{
//}

引き続きVPCダッシュボードから操作します。
左側のメニューで「インターネットゲートウェイ」を選択し、「インターネットゲートウェイの作成」をクリックします。

//image[111_VPC_Management_Console][IGWの作成][scale=0.9]{
//}

名前タグに、「start-infra-on-aws」と入力し、「作成」をクリックします。

//image[112_VPC_Management_Console][IGWの作成][scale=0.9]{
//}

IGWが作成できました。

//image[113_VPC_Management_Console][IGWの作成完了][scale=0.9]{
//}

== IGWをVPCにアタッチする

IGWは作成しただけだとVPCに紐づいていないため、VPCにアタッチ（紐づけ）する必要があります。

//image[114_VPC_Management_Console][IGWがVPCにアタッチされていない][scale=0.9]{
//}

先ほど作成したIGWを選択し、「アクション」から「VPCにアタッチ」をクリックします。

//image[115_VPC_Management_Console][「VPCにアタッチ」をクリック][scale=0.9]{
//}

プルダウンから先ほど作成した「start-infra-on-aws」VPCを選択し、「アタッチ」をクリックしましょう。

//image[116_VPC_Management_Console][「start-infra-on-aws」VPCを選択][scale=0.9]{
//}

これで、VPCにIGWがアタッチできました。

//image[117_VPC_Management_Console][IGWのアタッチ完了][scale=0.9]{
//}

== サブネットを作成する

次に、@<hd>{ネットワークを作成する前に|ネットワークのサブネット化}で説明したように、VPC「10.0.0.0/16」のネットワークをサブネット化しましょう。

//image[130_subnet][サブネットの作成][scale=0.8]{
//}

=== パブリックサブネットとプライベートサブネット

サブネットは次の2種類があります。

 * パブリックサブネット・・・IGWを経由してインターネットから接続可能。サブネット内からインターネットへのアクセスも可能。
 * プライベートサブネット・・・IGWを経由せず、インターネットから接続不可。サブネット内からインターネットへのアクセスはNAT@<fn>{NAT}を使用することで可能。

//footnote[NAT][NATもIGWと同じくプライベートIPアドレスとグローバルIPアドレスを変換します。NATはNAT自身にグローバルIPアドレスを割り当てることで、プライベートサブネット内のサーバーが持つプライベートIPアドレスをNATが持つ1つのグローバルIPアドレスに変換します。プライベートサブネットからインターネットに出て行くことはできても、インターネットからNATを通してプライベートサブネットにアクセスしてくることはできません。]

=== パブリックサブネットを作成する

今回は、パブリックサブネット2つを作成します。
引き続きVPCダッシュボードで操作します。

左側のメニューで「サブネット」を選択し、「サブネットの作成」をクリックします。

//image[131_VPC_Management_Console][「サブネットの作成」をクリック][scale=0.9]{
//}

=== アベイラビリティゾーンとは

サブネットの作成画面で「アベイラビリティゾーン」という見慣れない言葉が出てきましたね。

//image[131_AZ][アベイラビリティゾーン][scale=0.6]{
//}

AWSでサブネットを作成すると、アベイラビリティゾーン（AZ）の中に作成されます。
アベイラビリティゾーンとは、リージョンをさらに小さく分割した区分で、複数のデータセンターの集合体です。

例えば東京リージョンには現在、3つのAZがあります。

//image[130_AZ][アベイラビリティゾーン][scale=0.6]{
//}

サブネットの作成画面で次のように設定し、「作成」をクリックします。

//table[subnet_table][サブネット１つめの作成]{
サブネット名	VPC	アベイラビリティゾーン	IPv4CIDRブロック
----------
public-subnet01	start-infra-on-awsのVPC	ap-northeast-1a	10.0.0.0/24
//}

//image[132_VPC_Management_Console][サブネットの作成][scale=0.9]{
//}

サブネットが作成できました。

//image[133_VPC_Management_Console][サブネットの作成][scale=0.9]{
//}

もう１つサブネットを作成するため、「サブネットの作成」をクリックし、次のように設定しましょう。

//table[subnet_table][サブネット2つめの作成]{
サブネット名	VPC	アベイラビリティゾーン	IPv4CIDRブロック
----------
public-subnet02	start-infra-on-awsのVPC	ap-northeast-1c	10.0.1.0/24
//}

//image[134_VPC_Management_Console][サブネットの作成][scale=0.9]{
//}

public-subnet01とpublic-subnet02が作成できましたね。

== ルートテーブルの設定

サブネットを作成しただけでは、すべてプライベートサブネットになっています。
これから作成するルートテーブルでサブネットからIGWに通信を中継するように設定することで、パブリックサブネットになります。

引き続きVPCダッシュボードから操作します。

左のメニューから「ルートテーブル」を選択し、「ルートテーブルの作成」をクリックします。

//image[140_VPC_Management_Console][ルートテーブルの作成][scale=0.9]{
//}

ルートテーブル名に「public-subnet-route-table」と入力し、VPCにはプルダウンから作成したVPCを選択します。

「作成」をクリックします。

//image[141_VPC_Management_Console][ルートテーブルの作成][scale=0.9]{
//}

「閉じる」をクリックします。

//image[142_VPC_Management_Console][ルートテーブルの作成完了][scale=0.9]{
//}

作成したルートテーブルを選択し、「ルート」タブを表示したら、「ルートの編集」をクリックします。

//image[143_VPC_Management_Console][ルートの編集][scale=0.9]{
//}

「ルートの追加」ボタンをクリックしたら、送信先に「0.0.0.0/0」を入力し、ターゲットには「Internet Gateway」を選択します。
これは、ルーティングテーブル上に一致する送信先が設定されていない場合は、デフォルトルートの転送先（IGW）に中継するという意味です。

もともと送信先「10.0.0.0/16」は「local」というルートが設定されていましたね。
そのため、送信先がVPC内のネットワーク（10.0.0.0/16）以外であれば、すべてIGWに中継され、インターネットに探しにいくことになります。

//image[145_VPC_Management_Console][ルートの編集][scale=0.9]{
//}

ターゲットに作成したIGWが出てきますので選択して、「ルートの保存」をクリックします。

//image[146_VPC_Management_Console][ルートの保存][scale=0.9]{
//}

ルートが保存できました。

//image[147_VPC_Management_Console][ルートの保存完了][scale=0.9]{
//}

ルートテーブルを選択したまま、「サブネットの関連付け」タブを表示し、「サブネットの関連付けの編集」をクリックします。

//image[149_VPC_Management_Console][サブネットの関連付け][scale=0.9]{
//}

作成したサブネットが表示されますので、パブリックサブネット２つを選択し、「保存」をクリックします。

//image[150_VPC_Management_Console][パブリックサブネットの関連付け][scale=0.9]{
//}

パブリックサブネット2つが関連づけられました。

//image[151_VPC_Management_Console][パブリックサブネットの関連付け完了][scale=0.9]{
//}
