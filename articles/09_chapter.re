= HTTPSでアクセスできるようにしよう

== HTTPとHTTPSの違い

何度か説明しましたが、HTTPやHTTPSは通信プロトコルでしたね。

Internet ExplorerやGoogle Chrome等のブラウザを使用してWebサイトにアクセスし、閲覧したいページや画像、動画などをサーバに要求して、内容に応じてサーバがレスポンスを返します。レスポンスを受け取ったブラウザは画面上にページや画像、動画などを表示します。

HTTPは、この一連の流れを暗号化されていない状態で行います。

先ほど作成したHPを見てみましょう。ブラウザにGoogle chromを使用している場合、URLの左側に「保護されていない通信」と出ていますよね。
//image[380_Template][「保護されていない通信」と表示されている][scale=0.9]{
//}

暗号化されていない状態だと、通信経路で不正に盗聴される可能性があります。
個人情報を不正に取得されるかもしれません。これを防ぐのがHTTPSです。

HTTPSはSSL/TLSを利用したHTTP通信です。SSL/TLSは通信を暗号化するので、安全に情報のやりとりを行うことができます。万が一通信経路から情報が抜き取られたとしても、暗号化されているので中身を解読するのは困難です。

== SSL/TLS通信の仕組み

SSL/TLS通信の流れを見ていきましょう。

=== 暗号スイートの合意

せっかく暗号化するのであれば、不正に抜き取られても解読が難しい安全な暗号技術を使いたいですよね。
SSL/TLS上ではいくつかの暗号化技術が使われるのですが、使用される暗号技術の組のことを暗号スイートと呼びます。
まずは、ブラウザとサーバ間の両者が使用できる一番安全なSSL/TLS暗号化技術の組み合わせ（暗号スイート）を決めます。

//image[381_1_TLS][暗号スイートの合意][scale=0.7]{
//}

=== デジタル証明書と公開鍵の提示

サーバはブラウザへデジタル証明書（SSLサーバ証明書ともいいます）と公開鍵を送信します。
デジタル証明書は認証局（CA:Certificate Authority）が発行するもので、ブラウザは通信相手が送ってきた証明書が信頼できる認証局のものであることを確認します。（ブラウザには主要な認証局の証明書がプリインストールされているので、それを使って確認します。）

//image[381_2_TLS][デジタル証明書と公開鍵の提示][scale=0.7]{
//}

=== 共通鍵の元データ交換・共通鍵の生成

ブラウザは共通鍵をサーバからもらった公開鍵で暗号化してサーバへ送信します。

//image[381_3_TLS][共通鍵の元データ交換・共通鍵の生成][scale=0.7]{
//}

=== 暗号化通信開始

以降、共通鍵を使ったデータのSSL暗号化通信が開始されます。

//image[381_4_TLS][暗号化通信開始][scale=0.7]{
//}

このブラウザとの一連のやり取りをロードバランサーでできるため、これから設定していきましょう。

== デジタル証明書を発行しよう

HTTPS通信に必要なデジタル証明書を発行しましょう。

AWSのCertificate Manager（ACM）で無料でデジタル証明書を発行することができます。

AWSマネジメントコンソールでCertificate Managementを検索しましょう。

//image[381_Management_Console][Certificate Managementを検索][scale=0.9]{
//}

「証明書のプロビジョニング」の「今すぐ始める」をクリックします。

//image[382_AWS_Certificate_Manager][証明書のプロビジョニングを今すぐ始める][scale=0.9]{
//}

「パブリック証明書のリクエスト」を選択し、「証明書のリクエスト」をクリックします。

//image[383_AWS_Certificate_Manager][証明書のリクエスト][scale=0.9]{
//}

取得したドメインと、取得したドメインの手前に「*.」をつけたドメインを登録します。
著者の場合は、「start-infra-on-aws.tk」と「*.start-infra-on-aws.tk」を登録します。

*（アスタリスク）はワイルドカードで「www.start-infra-on-aws.tk」や「hoge.start-infra-on-aws.tk」など、すべてのサブドメインが対象となります。

「次へ」をクリックします。

//image[384_AWS_Certificate_Manager][ドメインを登録][scale=0.9]{
//}

検証方法は「DNSの検証」を選択し、「確認」をクリックします。

//image[385_AWS_Certificate_Manager][DNSの検証を選択][scale=0.9]{
//}

証明書のリクエスト内容を確認し、「確定とリクエスト」をクリックします。

//image[386_AWS_Certificate_Manager][「確定とリクエスト」をクリック][scale=0.9]{
//}

証明書のリクエストが完了しましたが、まだ検証保留中の状態です。

AWSが証明書を発行する際には、リクエストしたドメイン（著者の場合は start-infra-on-aws.tk）の所有者が本当に証明書をリクエストした人なのか？を検証する必要があります。

先ほど、検証方法は「DNSの検証」を選択しましたね。

Route53に登録したstart-infra-on-aws.tkに対して、CNAMEレコード（ドメインの別名）を作成することで、著者が本当に「start-infra-on-aws.tk」のドメインを所有していることを証明できます。

ドメイン名をクリックして、詳細レコードを表示しましょう。

//image[387_AWS_Certificate_Manager][詳細レコードを表示][scale=0.9]{
//}

「Route53でのレコード作成」をクリックします。
なお、「Route53でのレコード作成」ボタンが存在しない場合のフローは後ほど説明します。

//image[388_AWS_Certificate_Manager][「Route53でのレコード作成」をクリック][scale=0.9]{
//}

作成されるDNSレコード内容が表示されるため、「作成」をクリックします。

//image[390_AWS_Certificate_Manager][「作成」をクリック][scale=0.9]{
//}

サブドメインの方も同じく「Route53でのレコード作成」を実施しましょう。

//image[389_AWS_Certificate_Manager][Route53でのレコード作成を実施][scale=0.9]{
//}

DNSレコードの作成が完了しましたね。


//image[392_AWS_Certificate_Manager][DNSレコードの作成が完了][scale=0.9]{
//}

「続行」をクリックします。

//image[393_AWS_Certificate_Manager][「続行」をクリック][scale=0.9]{
//}

証明書一覧を確認すると、状況が「発行済み」となっています。証明書が発行できました。

//image[394_AWS_Certificate_Manager][証明書が「発行済み」となった][scale=0.9]{
//}

ステップ4：検証 の画面で「Route53でのレコード作成」ボタンが表示されていない場合、自力でDNSレコード追加する必要があります。


//image[395_AWS_Certificate_Manager][「Route53でのレコード作成」ボタンが表示されていない場合][scale=0.9]{
//}

まずは、「DNS設定をファイルにエクスポート」リンクをクリックしましょう。


//image[396_AWS_Certificate_Manager][「DNS設定をファイルにエクスポート」リンクをクリック][scale=0.9]{
//}


DNS設定がダウンロードできました。このDNSレコードをRoute53で作成する必要があります。

//image[397_DNS_Configuration][DNS設定をダウンロード][scale=0.9]{
//}

Route53のダッシュボードを開いたら、「ホストゾーン」をクリックします。

//image[398_Route_53_Management_Console][Route53で「ホストゾーン」をクリック][scale=0.9]{
//}

対象のドメインを選択し、「レコードセットに移動」をクリックします。

//image[399_Route_53_Management_Console][「レコードセットに移動」をクリック][scale=0.9]{
//}

先ほどダウンロードしたDNS設定のレコードセットを作成します。
名前に「Record Name」の文字列（サブドメインの部分のみ）を入力します。タイプは「CNAME」を選択、値に「Record Value」の文字列を入力します。

「作成」をクリックします。

//image[401_Route_53_Management_Console][レコードセットを作成][scale=0.9]{
//}

CNAMEのレコードが作成できました。

少し時間がたつと、Certificate Managementのドメイン検証が成功するはずです。

//image[402_Route_53_Management_Console][CNAMEのレコードが作成できた][scale=0.9]{
//}

== ロードバランサーでHTTPSの設定をしよう

作成した証明書をロードバランサーに登録します。
ロードバランサーはEC2のダッシュボードでしたね。

EC2のダッシュボードを開いたら、左のメニューで「ロードバランサー」を選択します。

「start-infra-on-aws」のロードバランサーを選択し、「リスナー」タブを表示し、「リスナーの追加」をクリックします。


//image[450_EC2_Management_Console][「リスナーの追加」をクリック][scale=0.9]{
//}

プロトコルは「HTTPS」を選択し、「アクションの追加」から「転送先...」を選択しましょう。

//image[451_EC2_Management_Console][転送先を選択][scale=0.9]{
//}

転送先にapを選択します。

//image[452_EC2_Management_Console][apを選択][scale=0.6]{
//}

セキュリティポリシーのプルダウンを押してみるとたくさんのポリシーが表示されますね。
ポリシーごとに、利用可能な暗号スイートが決まっています。

今回はデフォルト設定のままでOKです。

デフォルトのSSL証明書は、先ほど作成した証明書を選択しましょう。

設定したら、一番上にある「保存」をクリックします。

//image[453_EC2_Management_Console][「保存」をクリック][scale=0.9]{
//}

HTTPS用のリスナーが作成できました。

//image[454_EC2_Management_Console][HTTPSリスナーが作成できた][scale=0.9]{
//}


ロードバランサーのリスナータブで、リスナー一覧を表示します。

HTTPのリスナーはもう不要なので削除しましょう。HTTPのリスナーを選択し、「削除」をクリックします。

//image[455_1_EC2_Management_Console][HTTPのリスナーを削除][scale=0.6]{
//}

本当に削除してよいのか確認画面が出るので、「はい、削除する」をクリックします。

//image[455_2_EC2_Management_Console][はい、削除する」をクリック][scale=0.6]{
//}

HTTPSのリスナーを見ると、警告マークが出ています。
クリックして確認するとわかりますが、HTTPSの通信をするためには、ロードバランサーのセキュリティグループでHTTPS通信を許可する必要があります。

//image[455_EC2_Management_Console][HTTPSのリスナーに警告マークが出ている][scale=0.9]{
//}

同じEC2ダッシュボードで、左のメニューから「セキュリティグループ」を選択します。

albのセキュリティグループを選択し、「インバウンド」タブで「編集」をクリックしましょう。

//image[456_EC2_Management_Console][albのセキュリティグループを編集][scale=0.9]{
//}

HTTPSのレコードを追加します。

タイプ「HTTPS」を選択、ポートは「443」、ソースは自分が使用しているグローバルIPをCIDR表記（/32）で入力します。

不要になったHTTPのレコードは削除しましょう。

修正したら、「保存」をクリックします。

//image[457_EC2_Management_Console][HTTPSの通信を許可して保存][scale=0.9]{
//}

ブラウザから、URLをhttpsに変更して接続してみましょう。

@<href>{https://www.<取得したドメイン>}

HPが表示されましたね。

//image[458_Custom_Template][HPが表示された][scale=0.9]{
//}

これにて終了になります！お疲れ様でした！

勉強後は、作成したEC2インスタンスやALB、Route53のホストゾーンなどは無駄なコストがかからないように削除しておきましょう。
AWSのマネジメントコンソールで、作成した対象を選択し、「アクション」から削除できます。
